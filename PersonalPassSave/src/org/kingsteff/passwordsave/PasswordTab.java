package org.kingsteff.passwordsave;

import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;

import org.vaadin.dialogs.ConfirmDialog;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.LayoutEvents.LayoutClickEvent;
import com.vaadin.event.LayoutEvents.LayoutClickListener;
import com.vaadin.server.FileResource;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Window;
import com.vaadin.ui.themes.Runo;

public class PasswordTab extends AbsoluteLayout implements ValueChangeListener {


	@AutoGenerated
	private Button editButton;
	@AutoGenerated
	private Button removeButton;
	@AutoGenerated
	private Button addButton;
	@AutoGenerated
	private Table passtable;
	private UserAndPasswords allPasswordsForUser;
	private PasswordManager manager;

	private Button logout;

	private Button userManagement;
	
	private Button settings;
	private Button export;

	private PasswordTab self = null;
	private Object currentChoosenID;

	private Button generateRandomPassword = null;
	private TextField randomPasswordTextfield = null;
	private TextField randomPasswordLenghtTextfield = null;

	private HorizontalLayout activateGenerator = null;
	private Label activateGeneratorLabel;
	private Button changePassword;

	private CheckBox specialCharacters;

	
	public PasswordTab() {
		buildMainLayout();
		initButtons();
		initTableData();
		self = this;
	}

	private void initTableData() {

		passtable.addContainerProperty("ID", String.class, "");
		passtable.addContainerProperty("Label", String.class, "");
		passtable.addContainerProperty("Login", String.class, "");
		passtable.addContainerProperty("Password", String.class, "");
		passtable.addContainerProperty("Last_Change", Date.class, new Date());
		passtable.addContainerProperty("Comment", String.class, "");
		passtable.addContainerProperty("Website", String.class, "");
		passtable.setSelectable(true);
		passtable.setImmediate(true);
		passtable.setEditable(false);

		loadDataForCurrentUser();

		passtable.setColumnCollapsingAllowed(true);
		passtable.setColumnCollapsed("ID", true);

		passtable.setColumnWidth("Comment", 200);
		passtable.setColumnWidth("Label", 200);
		passtable.setColumnWidth("Password", 200);
		passtable.setColumnWidth("Website", 200);

		ItemClickEvent.ItemClickListener doubleClickListener = (new ItemClickEvent.ItemClickListener() {
			private static final long serialVersionUID = 2068314108919135281L;

			@Override
			public void itemClick(ItemClickEvent event) {
				if (event.isDoubleClick()) {
					showDetails();
				}
			}
		});

		passtable.addItemClickListener(doubleClickListener);
		passtable.addValueChangeListener(this);
		//passtable.setStyleName("passtable");

	}

	private void initButtons() {
		editButton.addClickListener(new Button.ClickListener() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				passtable.setEditable(!passtable.isEditable());
				if (editButton.getCaption().equals("Save")) {
					saveChanges();
				}
				editButton.setCaption((passtable.isEditable() ? "Save" : "Edit"));
				if (passtable.isEditable()) {
					editButton.setIcon(new ThemeResource(
							"../pps/images/save.png"));
				} else {
					editButton.setIcon(new ThemeResource(
							"../pps/images/edit.png"));
				}
			}
		});

		addButton.addClickListener(new Button.ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				openNewDialog();
			}

		});

		userManagement.addClickListener(new Button.ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				showUserManagent();
			}
		});
		
		settings.addClickListener(new Button.ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				showSettings();
			}
		});

		logout.addClickListener(new Button.ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				PersonalpasssaveApplication.getInstance().closeMe();
			}
		});

		
		export.addClickListener(new Button.ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				exportData();
			}
		});

		
		removeButton.addClickListener(new Button.ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				if (currentChoosenID != null) {
					Item item = passtable.getItem(currentChoosenID);
					Property itemName = item.getItemProperty("Label");

					ConfirmDialog.show(
							PersonalpasssaveApplication.getInstance(),
							"Really delete this password:"
									+ itemName.getValue()
									+ " ??? (CAN NOT BE UNDONE!!!)",
							new ConfirmDialog.Listener() {

								@Override
								public void onClose(ConfirmDialog dialog) {
									if (dialog.isConfirmed()) {
										removeEntry();
									}
								}
							});

				}
			}
		});
		generateRandomPassword.addClickListener(new Button.ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {

				try {
					String string = randomPasswordLenghtTextfield.getValue()
							.toString();
					Boolean specialChars = Boolean.valueOf(specialCharacters
							.getValue().toString());
					randomPasswordTextfield.setValue(manager
							.generateRandomPassword(Integer.parseInt(string),
									specialChars));
				} catch (Exception e) {

					new GeneralNotification(
							"Invalid character in length field", true,
							GeneralNotification.ERROR_MESSAGE,
							PersonalpasssaveApplication.getInstance()
									.getBaseController()).show();
				}
			}
		});

		activateGenerator.addLayoutClickListener(new LayoutClickListener() {

			@Override
			public void layoutClick(LayoutClickEvent event) {

				if (!generateRandomPassword.isVisible()) {
					removeComponent(activateGenerator);
					activateGeneratorLabel.setIcon(new ThemeResource(
							"../pps/images/cancel.png"));
					activateGeneratorLabel.setValue("close");

					generateRandomPassword.setVisible(true);
					randomPasswordTextfield.setVisible(true);
					randomPasswordLenghtTextfield.setVisible(true);
					specialCharacters.setVisible(true);
					addComponent(activateGenerator, "top:80.0px;left:20.0px;");
				} else {
					removeComponent(activateGenerator);
					activateGeneratorLabel.setIcon(new ThemeResource(
							"../pps/images/generator_small.png"));
					activateGeneratorLabel.setValue("Generator");
					generateRandomPassword.setVisible(false);
					randomPasswordTextfield.setVisible(false);
					randomPasswordLenghtTextfield.setVisible(false);
					specialCharacters.setVisible(false);
					addComponent(activateGenerator, "top:80.0px;left:20.0px;");
				}

			}
		});

		changePassword.addClickListener(new Button.ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				changePasswordAction();
			}
		});
	}

	protected void exportData() {
		PasswordManager manager = new PasswordManager();
		File generateCsvFile = manager.generateCsvFile(PersonalPassConstants.MAINDIR+"tmp/"+System.currentTimeMillis()+"_exp.csv");
		FileResource fr = new FileResource(generateCsvFile);
		PersonalpasssaveApplication.getInstance().getPage().open(fr, "Export", true);
	}

	protected void showSettings() {
		// TODO Auto-generated method stub
		
	}

	private void removeEntry() {
		Object objectid = passtable.getValue();

		Item item = passtable.getItem(objectid);
		Property itemPropertyID = item.getItemProperty("ID");
		manager.removePassword(itemPropertyID.getValue().toString(),
				PersonalpasssaveApplication.getInstance().getBaseController()
						.getCurrentUser());
		loadDataForCurrentUser();
	}

	private void showUserManagent() {
		PersonalpasssaveApplication.getInstance().getBaseController()
				.getWindow().showUserManagement();
	}

	private void saveChanges() {
		Collection itemIds = passtable.getItemIds();
		ArrayList beans = new ArrayList();
		for (Object currentItem : itemIds) {
			Item item = passtable.getItem(currentItem);
			Property itemPropertyID = item.getItemProperty("ID");
			Property itemPropertyLabel = item.getItemProperty("Label");
			Property itemPropertyLogin = item.getItemProperty("Login");
			Property itemPropertyPassword = item.getItemProperty("Password");
			Property itemPropertyCreationDate = item
					.getItemProperty("Last_Change");
			Property itemPropertyComment = item.getItemProperty("Comment");
			Property itemPropertyWebsite = item.getItemProperty("Website");
			PasswordInfos newInfos = new PasswordInfos();
			if (itemPropertyWebsite.getValue() == null) {
				newInfos.setWebsite("");
			} else {
				newInfos.setWebsite(itemPropertyWebsite.getValue().toString());
			}

			newInfos.setComment(itemPropertyComment.getValue().toString());
			newInfos.setLabel(itemPropertyLabel.getValue().toString());
			newInfos.setPassword(itemPropertyPassword.getValue().toString());
			newInfos.setLogin(itemPropertyLogin.getValue().toString());
			newInfos.setCreationdate((Date) itemPropertyCreationDate.getValue());
			newInfos.setId(itemPropertyID.getValue().toString());

			allPasswordsForUser.passwords.put(itemPropertyID.toString(),
					newInfos);
			System.out.println("for -->" + itemPropertyID.toString());

		}

		System.out.println(allPasswordsForUser);
		manager.addAllPasswords(PersonalpasssaveApplication.getInstance()
				.getBaseController().getCurrentUser(), allPasswordsForUser);
		loadDataForCurrentUser();

	}

	private void loadDataForCurrentUser() {
		passtable.removeAllItems();
		manager = new PasswordManager();
		try {
			allPasswordsForUser = manager
					.getAllPasswordsForUser(PersonalpasssaveApplication
							.getInstance().getBaseController().getCurrentUser());
			System.out.println("loading");
			System.out.println(allPasswordsForUser);
			int counter = 0;

			ArrayList<PasswordInfos> valueSet = new ArrayList<PasswordInfos>(
					allPasswordsForUser.passwords.values());
			Collections.sort(valueSet);
			for (PasswordInfos current : valueSet) {
				passtable.addItem(new Object[] {

				current.getId(), current.getLabel(), current.getLogin(),
						current.getPassword(), current.getCreationdate(),
						current.getComment(), current.getWebsite(), },
						new Integer(counter));
				counter++;
			}
			passtable.setCaption("Your current passwordlist has:"
					+ passtable.getItemIds().size() + " items");
		} catch (Exception e) {

			PasswordInfos incoming = new PasswordInfos();
			incoming.setLabel("DELETABLE DUMMY");
			incoming.setComment("DELETABLE DUMMY");
			incoming.setPassword("DELETABLE DUMMY");
			incoming.setId(BaseController.generaterandomId());
			manager.addPassword(incoming, PersonalpasssaveApplication
					.getInstance().getBaseController().getCurrentUser());

			try {
				allPasswordsForUser = manager
						.getAllPasswordsForUser(PersonalpasssaveApplication
								.getInstance().getBaseController()
								.getCurrentUser());

				int counter = 0;

				for (Object current : allPasswordsForUser.passwords.keySet()) {
					passtable.addItem(new Object[] {
							// current.getId(),
							allPasswordsForUser.passwords.get(current).getId(),
							allPasswordsForUser.passwords.get(current)
									.getLabel(),
							allPasswordsForUser.passwords.get(current)
									.getLogin(),
							allPasswordsForUser.passwords.get(current)
									.getPassword(),
							allPasswordsForUser.passwords.get(current)
									.getComment(),
							allPasswordsForUser.passwords.get(current)
									.getWebsite(), }, new Integer(counter));
					counter++;

				}
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
	}

	@AutoGenerated
	private void buildMainLayout() {
		// common part: create layout

		setImmediate(true);
		setWidth("100%");
		setHeight("1000px");

		// passtable
		passtable = new Table();
		passtable.setCaption("Your current passwordlist");
		passtable.setImmediate(true);
		
		passtable.setHeight("700px");
		addComponent(passtable, "top:210.0px;left:20.0px;");

		// addButton
		addButton = new Button();
		addButton.setCaption("Add");
		addButton.setImmediate(false);
		addButton.setWidth("-1px");
		addButton.setHeight("-1px");
		addButton
				.setIcon(new ThemeResource("../pps/images/plus.png"));
		addButton.addStyleName(Runo.BUTTON_SMALL);
		addComponent(addButton, "top:40.0px;left:20.0px;");

		// removeButton
		removeButton = new Button();
		removeButton.setCaption("Remove");
		removeButton.setImmediate(false);
		removeButton.setWidth("-1px");
		removeButton.setHeight("-1px");
		removeButton.setIcon(new ThemeResource(
				"../pps/images/trash.png"));
		removeButton.addStyleName(Runo.BUTTON_SMALL);
		addComponent(removeButton, "top:40.0px;left:105.0px;");

		// editButton
		editButton = new Button();
		editButton.setCaption("Edit");
		editButton.setImmediate(false);
		editButton.setWidth("-1px");
		editButton.setHeight("-1px");
		editButton.setIcon(new ThemeResource("../pps/images/edit.png"));
		editButton.addStyleName(Runo.BUTTON_SMALL);
		addComponent(editButton, "top:40.0px;left:220.0px;");
		
		changePassword = new Button();
		changePassword.setCaption("my password");
		changePassword.setImmediate(true);
		changePassword.setWidth("-1px");
		changePassword.setHeight("-1px");
		changePassword.addStyleName(Runo.BUTTON_SMALL);
		changePassword.setIcon(new ThemeResource("../pps/images/lock.png"));
		addComponent(changePassword, "top:40.0px;left:305.0px;");
		changePassword.setVisible(true);

		// editButton
		userManagement = new Button();
		userManagement.setCaption("UserManagement");
		userManagement.setImmediate(false);
		userManagement.setWidth("-1px");
		userManagement.setHeight("-1px");
		userManagement.setIcon(new ThemeResource("../pps/images/user.png"));
		if (PersonalpasssaveApplication.getInstance().getBaseController()
				.getCurrentUser().equals("admin")) {
			addComponent(userManagement, "top:40.0px;left:450.0px;");
		}
		userManagement.addStyleName(Runo.BUTTON_SMALL);
		
		

		logout = new Button();
		logout.setCaption("logout");
		logout.setImmediate(false);
		logout.setWidth("-1px");
		logout.setHeight("-1px");
		logout.setIcon(new ThemeResource("../pps/images/logout.png"));
		addComponent(logout, "top:40.0px;left:900.0px;");
		logout.addStyleName(Runo.BUTTON_SMALL);
		
		
		settings = new Button();
		settings.setCaption("settings");
		settings.setImmediate(false);
		settings.setWidth("-1px");
		settings.setHeight("-1px");
		settings.setIcon(new ThemeResource("../pps/images/settings2.png"));
		if (PersonalpasssaveApplication.getInstance().getBaseController()
				.getCurrentUser().equals("admin")) {
			addComponent(settings, "top:80.0px;left:900.0px;");
		}
		settings.addStyleName(Runo.BUTTON_SMALL);
		
		
		
		export = new Button();
		export.setCaption("settings");
		export.setImmediate(false);
		export.setWidth("-1px");
		export.setHeight("-1px");
		export.setIcon(new ThemeResource("../pps/images/export.png"));
		addComponent(settings, "top:150.0px;left:900.0px;");

		generateRandomPassword = new Button();
		generateRandomPassword.setIcon(new ThemeResource("../pps/images/reload.png"));
		generateRandomPassword.setImmediate(true);
		generateRandomPassword.setWidth("-1px");
		generateRandomPassword.setHeight("-1px");
		addComponent(generateRandomPassword, "top:130.0px;left:220.0px;");
		generateRandomPassword.setVisible(false);
		//generateRandomPassword.addStyleName(Runo.BUTTON_SMALL);

		randomPasswordTextfield = new TextField();
		randomPasswordTextfield.setWidth("200px");
		randomPasswordTextfield.setImmediate(true);
		addComponent(randomPasswordTextfield, "top:130.0px;left:20.0px;");
		randomPasswordTextfield.setVisible(false);

		randomPasswordLenghtTextfield = new TextField();
		randomPasswordLenghtTextfield.setCaption("Password Length");
		randomPasswordLenghtTextfield.setValue("12");
		randomPasswordLenghtTextfield.setWidth("35px");
		randomPasswordLenghtTextfield.setImmediate(true);
		addComponent(randomPasswordLenghtTextfield, "top:130.0px;left:320.0px;");
		randomPasswordLenghtTextfield.setVisible(false);

		specialCharacters = new CheckBox();
		specialCharacters.setCaption("Special Chars?");
		specialCharacters.setValue(Boolean.valueOf("true"));
		specialCharacters.setImmediate(true);
		addComponent(specialCharacters, "top:130.0px;left:480.0px;");
		specialCharacters.setVisible(false);

		activateGenerator = new HorizontalLayout();
		activateGeneratorLabel = new Label();
		activateGeneratorLabel.setIcon(new ThemeResource(
				"../pps/images/generator_small.png"));
		activateGeneratorLabel.setValue("Generator");
		activateGenerator.addComponent(activateGeneratorLabel);
		addComponent(activateGenerator, "top:80.0px;left:20.0px;");



	}

	private void openNewDialog(){
		final PasswordDetailsDialog detailsDialog = new PasswordDetailsDialog();
		detailsDialog.setModal(true);
		detailsDialog.setCaption("Details");
		PersonalpasssaveApplication.getInstance().getBaseController()
				.addWindow(detailsDialog);
		detailsDialog.getClose().addClickListener(
				new Button.ClickListener() {
					@Override
					public void buttonClick(ClickEvent event) {
						detailsDialog.close();
					}
				});
		detailsDialog.getSaveButton().addClickListener(
				new Button.ClickListener() {
					@Override
					public void buttonClick(ClickEvent event) {
						addItem(detailsDialog.getPasswordInfos());
						detailsDialog.close();
					}
				});
		
	}
	
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	private void addItem(PasswordInfos newPassword) {
		Object addItem = passtable.addItem();
//
//		editButton.setCaption("Save");
//		editButton.setIcon(new ThemeResource("../pps/images/save.png"));
		Item item = passtable.getItem(addItem);
		
		Property itemPropertyCreationDate = item
				.getItemProperty("Last_Change");
		itemPropertyCreationDate.setValue(new Date());
		Property itemPropertyLabel = item.getItemProperty("Label");
		itemPropertyLabel.setValue(newPassword.getLabel());
		Property itemPropertyLogin = item.getItemProperty("Login");
		itemPropertyLogin.setValue(newPassword.getLogin());
		Property itemPropertyPassword = item.getItemProperty("Password");
		itemPropertyPassword.setValue(newPassword.getPassword());
		Property itemPropertyComment = item.getItemProperty("Comment");
		itemPropertyComment.setValue(newPassword.getComment());
		Property itemPropertyID = item.getItemProperty("ID");
		itemPropertyID.setValue(newPassword.getId());
		Property itemPropertyWebsite = item.getItemProperty("Website");
		itemPropertyWebsite.setValue(newPassword.getWebsite());
		passtable.setCurrentPageFirstItemId(addItem);
		saveChanges();
	}

	private void editTable(final Object newItemId) {
		passtable.setEditable(true);
	}

	private void showDetails() {

		Item item = passtable.getItem(currentChoosenID);
		if (item != null) {
			Property itemPropertypassword = item.getItemProperty("Password");
			Property itemPropertylogin = item.getItemProperty("Login");
			Property itemPropertywebsite = item.getItemProperty("Website");
			Property itemPropertycomment = item.getItemProperty("Comment");
			final PasswordDetailsDialog detailsDialog = new PasswordDetailsDialog(
					itemPropertypassword.getValue().toString(),
					itemPropertylogin.getValue().toString(),
					itemPropertywebsite.getValue() != null ? itemPropertywebsite
							.getValue().toString() : "",
					itemPropertycomment != null ? itemPropertycomment
							.getValue().toString() : "");
			detailsDialog.setModal(true);
			detailsDialog.setCaption("Details");
			PersonalpasssaveApplication.getInstance().getBaseController()
					.addWindow(detailsDialog);
			detailsDialog.getClose().addClickListener(
					new Button.ClickListener() {
						@Override
						public void buttonClick(ClickEvent event) {
							detailsDialog.close();
						}
					});
		}

	}

	@Override
	public void valueChange(ValueChangeEvent event) {
		Object objectid = passtable.getValue();
		if (objectid != null) {
			currentChoosenID = objectid;
		}

	}

	private void changePasswordAction() {
		final ChangePasswordDialog changePasswordDialog = new ChangePasswordDialog();
		final Window changePAsswordWindow = new Window("Passwordchange");
		changePAsswordWindow.setContent(changePasswordDialog);
		changePAsswordWindow.setWidth("300px");
		changePAsswordWindow.setHeight("250px");
		changePAsswordWindow.setModal(true);
		changePasswordDialog.getSave().addClickListener(new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				try {

					String pass1 = changePasswordDialog.getTextfieldPassword()
							.getValue().toString();
					String pass2 = changePasswordDialog
							.getTextFieldverifyPassword().getValue().toString();
					if (pass1.equals(pass2)) {
						PersonalpasssaveApplication
								.getInstance()
								.getLoginManager()
								.setUsersPassword(
										PersonalpasssaveApplication
												.getInstance()
												.getBaseController()
												.getCurrentUser(),
										changePasswordDialog
												.getTextfieldPassword()
												.getValue().toString());

						PersonalpasssaveApplication.getInstance()
								.getBaseController()
								.removeWindow(changePAsswordWindow);
					} else {

						new GeneralNotification("Passwords not consistent",
								true, GeneralNotification.ERROR_MESSAGE,
								PersonalpasssaveApplication.getInstance()
										.getBaseController()).show();
					}

				} catch (Exception e) {

					e.printStackTrace();
					new GeneralNotification("Creation failed", true,
							GeneralNotification.ERROR_MESSAGE,
							PersonalpasssaveApplication.getInstance()
									.getBaseController()).show();
				}
			}
		});
		changePasswordDialog.getCancel().addClickListener(new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				PersonalpasssaveApplication.getInstance().getBaseController()
						.removeWindow(changePAsswordWindow);
			}
		});
		PersonalpasssaveApplication.getInstance().getBaseController()
				.addWindow(changePAsswordWindow);
	}
}
